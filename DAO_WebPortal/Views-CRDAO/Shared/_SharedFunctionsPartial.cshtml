@using DAO_WebPortal.Resources
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor

<script src="~/Casper/tsresult.js"></script>
<script src="~/Casper/CasperClientHelper.js"></script>
<script src="~/Casper/CasperJsSdk.js"></script>
@*<script src="~/Casper/daocontracts.js"></script>*@

@* <script src="~/Casper/CasperClientHelper.js"></script>
    <script src="~/Casper/CasperERC20.js"></script>
    <script src="~/Casper/CasperCEP47.js"></script> *@

<script>

    $(document).ready(function () {
        //Enter keypress submit event for forms
        $(document).on('keypress', function (e) {
            if (e.which == 13) {
                if ($("#modal-register").hasClass("show")) {
                    Register();
                }
                else if ($("#modal-forgotpass").hasClass("show")) {
                    ResetPassword();
                }
                else if ($("#modal-login").hasClass("show")) {
                    Login();
                }
                else if ($("#modal-resetpass").hasClass("show")) {
                    ResetPasswordComplete();
                }
            }
        });

        //Create Captcha after failed request attempts for all public inputs
    @if (httpContextAccessor.HttpContext.Session.GetInt32("FailCount") > 3)
    {
        @Html.Raw("resetCaptchaImage(\"#img-captcha-login\", \"securityCodeLogin\");")
        @Html.Raw("resetCaptchaImage(\"#img-captcha-register\", \"securityCodeRegister\");")
        @Html.Raw("resetCaptchaImage(\"#img-img-captcha-resetpass\", \"securityCodeResetPass\");")
        @Html.Raw("resetCaptchaImage(\"#img-captcha-resetpasscomplete\", \"securityCodeResetPassComplete\");")
        @Html.Raw("$(\".captchaDiv\").removeClass(\"d-none\");")
        @Html.Raw("failCount=" + httpContextAccessor.HttpContext.Session.GetInt32("FailCount"))
        ;
    }

            //Toastr library options
            toastr.options = {
            "closeButton": true,
                "debug": false,
                    "newestOnTop": true,
                        "progressBar": false,
                            "positionClass": "toast-bottom-right",
                                "preventDuplicates": false,
                                    "onclick": null,
                                        "showDuration": "300",
                                            "hideDuration": "1000",
                                                "timeOut": "5000",
                                                    "extendedTimeOut": "1000",
                                                        "showEasing": "swing",
                                                            "hideEasing": "linear",
                                                                "showMethod": "fadeIn",
                                                                    "hideMethod": "fadeOut",
                                                                        "escapeHtml ": false
        };

    });


    //Creates new captcha image
    function resetCaptchaImage(captchaID, code) {
        var d = new Date();
        $(captchaID).attr("src", "/get-captcha-image?" + d.getTime() + "&code=" + code);
    }

    //Login function
    function Login() {
        //Show loader and disable submit button
        ShowLoader();

        //Create login model
        var code = $('#securityCodeLogin').val();
        var email = $('#email').val()
        var password = $('#pass').val();
        var token = $('input[name="__RequestVerificationToken"]', token).val();

        //Save username/email in local storage if "Remember Me" is checked.
        if ($('#chcremember').is(':checked')) {
            localStorage.setItem("username", email);
        }
        else {
            localStorage.setItem("username", "");
        }

        //Ajax post action
        $.ajax({
            type: "POST",
            url: "../Public/Login",
            data: { "email": email, "password": password, "usercode": code, "__RequestVerificationToken": token },
            async: true,
            success: function (result) {
                if (result.success) {
                    if ('@TempData["ReloadPage"]' != '') {
                        location.reload();
                    }
                    else {
                        window.location.href = "../Home";
                    }
                }
                else {
                    failCount++;
                    toastr.warning(result.message);
                    //Show captcha image after failed request attempts
                    if (failCount > 3) {
                        resetCaptchaImage("#img-captcha-login", "securityCodeLogin");
                        $(".captchaDiv").removeClass("d-none");
                    }
                    HideLoader();
                }
            },
            failure: function (response) {
                toastr.warning("Server connection error");
                HideLoader();
            },
            error: function (response) {
                toastr.error("Unexpected error");
                HideLoader();
            }
        });
    }

    //------Casper chain login functions------
    var checkInterval;
    function ConnectWallet(login) {

        if ("@Program._settings.DaoBlockchain.ToString()" == "Casper") {
            if (!window.CasperWalletProvider) {
                toastr.warning("Please install Casper Wallet from: https://www.casperwallet.io/download");
            }

            const CasperWalletProvider = window.CasperWalletProvider;
            const CasperWalletEventTypes = window.CasperWalletEventTypes;

            const provider = CasperWalletProvider();

            provider.requestConnection().then(data => {

                if (data != true) {
                    toastr.warning("Casper wallet connection failed.");
                    return;
                }

                provider.getActivePublicKey().then(data => {
                    ShowLoader();

                    var token = $('input[name="__RequestVerificationToken"]', token).val();

                    //Ajax post action
                    urlLogin = "../CasperChain/ConnectWallet"
                    if (login == true) {
                        urlLogin = "../CasperChain/LoginChain";
                    }

                    $.ajax({
                        type: "POST",
                        url: urlLogin,
                        data: { "publicAddress": data, "__RequestVerificationToken": token },
                        async: true,
                        success: function (result) {
                            if (result.success) {
                                window.location.href = "../Home";
                            }
                            else {
                                failCount++;
                                toastr.warning(result.message);
                                //Show captcha image after failed request attempts
                                if (failCount > 3) {
                                    resetCaptchaImage("#img-captcha-login", "securityCodeLogin");
                                    $(".captchaDiv").removeClass("d-none");
                                }
                                HideLoader();
                            }
                        },
                        failure: function (response) {
                            toastr.warning("Server connection error");
                            HideLoader();
                        },
                        error: function (response) {
                            toastr.error("Unexpected error");
                            HideLoader();
                        }
                    });
                }).catch(error => {
                    toastr.warning("Error while geting public key: " + error);
                });
            }).catch(error => {
                toastr.warning("Casper wallet connection error: " + error);
            });;
        }

    }

    //---------------------------------------

    //Register function
    function Register() {
        //Check if terms is checked
        if (!$("#chcTerms").is(":checked")) {
            toastr.warning("@Lang.Login_CheckTermsError");
            return;
        }

        //Show loader and disable submit button
        ShowLoader();

        //Create register model
        var email = $('#emailregister').val()
        var namesurname = $('#nameregister').val();
        var username = $('#usernameregister').val();
        var pass = $('#passregister').val();
        var pass2 = $('#passregister2').val();
        var code2 = $('#securityCodeRegister').val();
        var token = $('input[name="__RequestVerificationToken"]', token).val();

        //Ajax post action
        $.ajax({
            type: "POST",
            url: "../Public/Register",
            async: true,
            data: { "email": email, "namesurname": namesurname, "username": username, "password": pass, "repass": pass2, "usercode": code2, "__RequestVerificationToken": token },
            success: function (result) {
                if (result.success) {
                    toastr.success(result.message);
                    $("#modal-signUp").modal("toggle");
                    $("#modal-login").modal("toggle");
                }
                else {
                    failCount++;
                    toastr.error(result.message);
                    //Show captcha image after failed request attempts
                    if (failCount > 3) {
                        resetCaptchaImage("#img-captcha-register", "securityCodeRegister");
                        $(".captchaDiv").removeClass("d-none");
                    }
                }
            },
            failure: function (response) {
                toastr.warning("Server connection error");
                HideLoader();
            },
            error: function (response) {
                toastr.error("Unexpected error");
                HideLoader();
            }
        }).done(function () {
            HideLoader();
        });
    }

    //Reset password function
    function ResetPassword() {
        //Show loader and disable submit button
        ShowLoader();

        //Create reset password model
        var email = $('#emailforgot').val()
        var token = $('input[name="__RequestVerificationToken"]', token).val();
        var code = $('#securityCodeResetPass').val();

        //Ajax post action
        $.ajax({
            type: "POST",
            url: "../Public/ResetPassword",
            async: true,
            data: { "email": email, "usercode": code, "__RequestVerificationToken": token },
            success: function (result) {
                if (result.success) {
                    toastr.success(result.message);
                }
                else {
                    failCount++;
                    toastr.error(result.message);
                }

                //Show captcha image after failed request attempts
                if (failCount > 3) {
                    resetCaptchaImage("#img-captcha-resetpass", "securityCodeResetPass");
                    $(".captchaDiv").removeClass("d-none");
                }
            },
            failure: function (response) {
                HideLoader();
            },
            error: function (response) {
                HideLoader();
            }
        }).done(function () {
            HideLoader();
        });

    }

    //Reset password complete function
    function ResetPasswordComplete() {
        //Show loader and disable submit button
        ShowLoader();

        //Create new password model
        var pass1 = $('#passreset').val()
        var pass2 = $('#passreset2').val()
        var token = $('input[name="__RequestVerificationToken"]', token).val();
        var code = $('#securityCodeResetPassComplete').val();

        //Ajax post action
        $.ajax({
            type: "POST",
            url: "../Public/ResetPasswordComplete",
            async: true,
            data: { "newpass": pass1, "newpassagain": pass2, "usercode": code, "__RequestVerificationToken": token },
            success: function (result) {
                if (result.success) {
                    toastr.success(result.message);
                    $("#modal-resetpass").modal("toggle");
                    setTimeout(function () {
                        $("#modal-login").modal("toggle");
                    }, 500);
                }
                else {
                    failCount++;
                    toastr.error(result.message);
                }

                if (failCount > 3) {
                    resetCaptchaImage("#img-captcha-resetpasscomplete", "securityCodeResetPassComplete");
                    $(".captchaDiv").removeClass("d-none");
                }
            },
            failure: function (response) {
                toastr.warning("Server connection error");
                HideLoader();
            },
            error: function (response) {
                toastr.error("Unexpected error");
                HideLoader();
            }
        }).done(function () {
            HideLoader();
        });
    }

    //Shows spinner and disables submit buttons
    function ShowLoader(explanation = "") {
        $("#loaderExplanation").addClass("d-none");
        if (explanation.length > 0) {
            $("#loaderExplanation").html(explanation);
            $("#loaderExplanation").removeClass("d-none");
        }

        //Disable submit button
        $('.submitFormButton').prop('disabled', true);
        //Display loading
        $(".spinner").removeClass("load-done");
        $('.spinner').fadeIn(300);
        $('.preloader').fadeIn(300);
    }

    //Hides spinner and enables submit buttons
    function HideLoader() {
        //Hide loading
        $('.spinner').fadeOut(300);
        $('.preloader').delay(300).fadeOut(300);
        //Enable submit button
        $('.submitFormButton').removeAttr("disabled");
    }

    //Update user wallet
    function ChangeUserWallet(response) {
        if (response == 1) {
            var publicAddress = "";

            if ("@Program._settings.DaoBlockchain.ToString()" == "Casper") {
                if (!window.CasperWalletProvider) {
                    toastr.warning("Please install Casper Wallet from: https://www.casperwallet.io/download");
                }

                const CasperWalletProvider = window.CasperWalletProvider;
                const CasperWalletEventTypes = window.CasperWalletEventTypes;

                const provider = CasperWalletProvider();

                provider.requestConnection().then(data => {
                    if (data != true) {
                        toastr.warning("Casper wallet connection failed.");
                        return;
                    }

                    provider.getActivePublicKey().then(data => {
                        $.ajax({
                            type: "GET",
                            url: "../WalletUpdate?walletAddress=" + data,
                            success: function (result) {
                                if (result.success) {
                                    ShowLoader();
                                    location.reload();
                                } else {
                                    toastr.warning(result.message);
                                }
                            }
                        });

                    }).catch(error => {
                        toastr.warning("Error while geting public key: " + error);
                    });
                }).catch(error => {
                    toastr.warning("Error while geting public key: " + error);
                });
            }
        }
        else {
            $("#modal-walletchange").modal("toggle");
        }
    }

    function ShowChainActionDetail(id) {
        var chainName = "";
    @if (Program._settings.DaoBlockchain != null)
    {
        @Html.Raw("chainName = '"+ Helpers.Constants.Enums.Blockchain.Casper.ToString() +"';")
        ;
    }
            window.open('../' + chainName + 'Chain/ChainActionDetail?id=' + id, '_blank').focus();
    }

    function CheckWalletAndSendDeploy(requestUrl, sendDeployFunction) {
        if (!window.CasperWalletProvider) {
            toastr.warning("Please install Casper Wallet from: https://www.casperwallet.io/download");
        }

        const CasperWalletProvider = window.CasperWalletProvider;
        const CasperWalletEventTypes = window.CasperWalletEventTypes;

        const provider = CasperWalletProvider();

        provider.isConnected().then(data => {
            if (data == false) {
                provider.requestConnection().then(data => {
                    if (data != true) {
                        HideLoader();
                        toastr.warning("Casper wallet connection failed.");
                        return;
                    }

                    provider.getActivePublicKey().then(data => {
                        var accountPublicKey = data;

                        var token = $('input[name="__RequestVerificationToken"]', token).val();

                        $.ajax({
                            type: "POST",
                            url: "../CasperChain/ConnectWallet",
                            data: { "publicAddress": data, "__RequestVerificationToken": token },
                            async: true,
                            success: function (result) {

                            },
                            failure: function (response) {
                                toastr.warning("Server connection error");
                                HideLoader();
                            },
                            error: function (response) {
                                toastr.error("Unexpected error");
                                HideLoader();
                            }
                        });

                        StartDeploy(requestUrl, sendDeployFunction, data);
                    }).catch(error => {
                        HideLoader();
                        toastr.warning("Error while geting public key: " + error);
                    });

                }).catch(error => {
                    HideLoader();
                    toastr.warning("Error while connecting wallet: " + error);
                });
            }
            else {
                provider.getActivePublicKey().then(data => {
                    var accountPublicKey = data;
                    StartDeploy(requestUrl, sendDeployFunction, data);
                }).catch(error => {
                    HideLoader();
                    toastr.warning("Error while geting public key: " + error);
                });
            }
        }).catch(error => {
            HideLoader();
            toastr.warning("Error while getting wallet connection status, please check if your wallet is connected: " + error);
        });
    }

    function StartDeploy(requestUrl, sendDeployFunction, accountPublicKey) {
        const CasperWalletProvider = window.CasperWalletProvider;
        const CasperWalletEventTypes = window.CasperWalletEventTypes;

        const provider = CasperWalletProvider();

        ShowLoader("Creating deploy object...");
        //Ajax post action
        $.ajax({
            type: "GET",
            url: requestUrl,
            success: async function (result) {
                if (result.success) {
                    ShowLoader("Waiting for sign...");

                    var deployRes = { "deploy": JSON.parse(result.message) };

                    var deploy = DeployUtil.deployFromJson(deployRes).unwrap();

                    const deployJson = DeployUtil.deployToJson(deploy);

                    provider.sign(JSON.stringify(deployJson), accountPublicKey)
                        .then(res => {
                            if (res.cancelled) {
                                toastr.warning('Sign cancelled');
                                HideLoader();
                            } else {
                                console.log(res);

                                const signedDeploy = DeployUtil.setSignature(
                                    deploy,
                                    res.signature,
                                    CLPublicKey.fromHex(accountPublicKey)
                                );

                                const json = DeployUtil.deployToJson(signedDeploy);

                                toastr.success('Sign successful, sending deploy...');
                                console.log(signedDeploy);

                                ShowLoader("Sending signed deploy. This may take few minutes...");

                                sendDeployFunction(json.deploy)
                            }
                        })
                        .catch(err => {
                            HideLoader();
                            toastr.warning('Sign Error: ' + err);
                        });

                }
                else {
                    HideLoader();
                    toastr.warning(result.message);
                }
            },
            failure: function (response) {
                HideLoader();
                toastr.warning("@Lang.ConnectionError");
            },
            error: function (response) {
                HideLoader();
                toastr.error("@Lang.UnexpectedError");
            }
        });
    }
</script>